version: '3.8'

services:
  # ========== MILVUS DEPENDENCIES ==========
  
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus-rag-network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"  # MinIO Console
      - "9000:9000"  # MinIO API
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus-rag-network

  # ========== MILVUS DATABASE ==========
  
  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.4
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"  # Milvus gRPC
      - "9091:9091"    # Milvus HTTP
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - milvus-rag-network

  # ========== RAG APPLICATION ==========
  
  rag-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag-app
    ports:
      - "8501:8501"  # Streamlit
    volumes:
      # Persistent data - mounted from host
      - ./data:/app/data
      - ./config:/app/config
      # Logs (optional)
      - ./logs:/app/logs
    environment:
      # === Infrastructure configuration ===
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - PYTHONPATH=/app
      
      # === Streamlit configuration ===
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      
      # === Sensitive environment variables (from .env) ===
      - GROQ_API_KEY=${GROQ_API_KEY}
      - JINA_API_KEY=${JINA_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      
      # === Application configuration ===
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CONFIG_ENV=${CONFIG_ENV:-dev}
      
    env_file:
      - .env  # Docker Compose automatically reads this file
    depends_on:
      milvus:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      start_period: 60s
      timeout: 10s
      retries: 3
    networks:
      - milvus-rag-network

# ========== PERSISTENT VOLUMES ==========
volumes:
  etcd_data:
    driver: local
  minio_data:
    driver: local  
  milvus_data:
    driver: local

# ========== CUSTOM NETWORK ==========
networks:
  milvus-rag-network:
    driver: bridge
    name: milvus-rag-network
